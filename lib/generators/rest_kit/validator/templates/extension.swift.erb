extension SupplierAccount {
    func errorMsg(field: String) -> String {
        let messageMap: [String : String] = [
        <%- presence_validations.each do |validation| -%>
            "<%= validation.camelize(:lower) %>" : "k<%= model_name %>No<%= validation.camelize %>",
        <%- end -%>
        ]

        if let localisableStringName = messageMap[field] {
            return NSLocalizedString(localisableStringName, comment: "Error field: \(field)")
        } else {
            return NSLocalizedString("kSupplierGenericFailure", comment: "Error field missing: \(field)")
        }
    }

    func validate() -> Bool {
        let validator = initValidator()

        if hasErrors(validator: validator) {
            return false
        }

        return true
    }

    private func initValidator() -> PCDValidator {
        var validator = PCDValidator(object: self)
        validator.addValidationForAttributes([
        <%- presence_validations.each do |validation| -%>
            "<%= validation.camelize(:lower) %>",
        <%- end -%>
        ])

        return validator
    }

    private func hasErrors(#validator: PCDValidator) -> Bool {
        let errors = validator.validate() as [String]

        if let errorField = errors.first {
            var message: String = errorMsg(errorField)

            PCDHUD.showErrorWithStatus(message)

            return true
        }

        return false
    }

}