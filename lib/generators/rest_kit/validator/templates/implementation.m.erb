#import <objc/runtime.h>

#import "<%= filename %>.h"

@implementation <%= model.ios_base_class_name %> (<%= category_name %>)

- (void)setErrorPaths:(NSArray *)errorPaths
{
    objc_setAssociatedObject(self, @"errorPaths", errorPaths, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (NSArray *)errorPaths {
    return objc_getAssociatedObject(self, @"errorPaths");
}

- (BOOL)validate
{
    RKGValidator *validator = [self createValidator];

    if ([validator hasErrors]) {
        [self setErrorPaths:validator.invalidKeyPaths];
        return false;
    } else {
        [self setErrorPaths:nil];
    }

    return true;
}

- (RKGValidator *)createValidator
{
    RKGValidator *validator = [[RKGValidator alloc] initWithObject:self];

    <%- model.presence_validators.each do |validator| -%>
    [validator addPresenceValidatorForField:<%= "@\"#{validator.camelize(:lower)}\"" %>];
    <%- end -%>

    return validator;
}

+ (NSString *)errorMessage:(NSString *)field
{
    NSDictionary *messageMap = @{
    <%- model.presence_validators.each do |validator| -%>
    @"<%= validator.camelize(:lower) %>" : @"k<%= model.entity_name %>No<%= validator.camelize %>",
    <%- end -%>
    };

    if (messageMap[field]) {
        return NSLocalizedString(messageMap[field], nil);
    } else {
        return NSLocalizedString(@"k<%= model.entity_name %>GenericFailure", nil);
    }
}

@end
